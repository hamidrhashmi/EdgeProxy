####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no
alias = 'mblrtsip.demovopium.com'

#listen=udp:192.168.21.65:5060
listen=udp:192.168.0.1:7000


disable_tcp=yes


####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"



#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timer", 10)
modparam("tm", "fr_inv_timer", 60)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", "ACC_FAILED")
/* account triggers (flags) */
modparam("acc", "log_flag", "ACC_DO")
modparam("acc", "log_missed_flag", "ACC_MISSED")


#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://opensips:opensips@localhost/opensips")
modparam("dialog", "rr_param", "siplb")

#### DISPATCHER
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "mysql://opensips:opensips@localhost/opensips")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:siplb@77.66.23.48")
modparam("dispatcher", "ds_ping_interval", 15)

##### Path #####
loadmodule "path.so"
modparam("path", "use_received", 1)

##### Domain #####
loadmodule "domain.so"
modparam("domain", "db_url", "mysql://opensips:opensips@localhost/opensips")
modparam("domain", "db_mode", 1)   # Use caching

#### ---- LOCALCACHE ---- #####
loadmodule "cachedb_local.so"

####### Routing Logic ########


# main request routing logic

route{
        xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: Receive request $rm from $si \n"); 
	
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (is_method("OPTIONS")) {	
		sl_send_reply("200","ACK");
		exit;
	}

	if (is_method("PUBLISH")) {	
		sl_send_reply("405","Method not allowed");
		exit;
	}


	if (has_totag() ) {
		xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: Request $rm from $si has totag  \n"); 
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			
			xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: Removing route from method $rm  \n"); 
			# validate the sequential request against dialog
			if ( $DLG_status!=NULL && !validate_dialog() ) {
				xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
				## exit;
			}

			if (is_direction("upstream")) {
				xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: UAS to UAC - Upstream  \n"); 
			} else {
				xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: UAC to UAS - Downstream  \n"); 
			}
			
			if (is_method("BYE")) {
#				setflag(ACC_DO); # do accounting ...
#				setflag(ACC_FAILED); # ... even if the transaction fails
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				remove_hf("Proxy-Authorization");
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					xlog("L_INFO", "[$pr:$fU@$si:$sp]: Method ACK with Request URI: $ru  \n"); 
					t_relay();
				} else {
					xlog("L_INFO", "[$pr:$fU@$si:$sp]: Method ACK Discarded   \n"); 
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	} else {

		xlog("L_INFO", "[$pr:$fU@$si:$sp]: Request $rm from $si has NO to_tag   \n"); 
		 if (is_method("INVITE") && ( $si == "192.168.1.2" ||  $si == "192.168.1.3" )) {
			xlog("L_INFO", "[$pr:$fU@$si:$sp]: INVITE from RTSIP   \n"); 
			remove_hf("Route");
#			$ct,field(uri) = "sip:" + $fU + "@" + $Ri + ":" + $Rp;
			xlog("L_INFO", "[$pr:$fU@$si:$sp]: INVITE r-uri: $ru  \n"); 
			$avp(ruri) = $(ru{s.select,0,;});
			xlog("L_INFO", "[$pr:$fU@$si:$sp]: Caching r-uri: $avp(ruri)  \n"); 
			cache_store("local","ruri_$ci","$avp(ruri)",300);
			record_route();
			route(RELAY);
		};

	}

	#### INITIAL REQUESTS

        xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: SIP Method is $rm with Request-URI $ru \n"); 

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

#	t_check_trans();
	# record routing
	record_route();
	add_rr_param(";EdgeProxy=true");

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}


#	setflag(ACC_DO); # do accounting

        xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: Dispatching request $rm \n"); 

	if (is_method("REGISTER")) {
	       	xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: Adding Path to Method $rm \n");
		if (!add_path_received()) {
			sl_send_reply("503", "Internal Path Error");
		}; 
	}

	ds_select_dst("1", "0");

        xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: Dispatched to $du \n"); 

	t_on_failure("GW_FAILOVER");
	t_on_reply("GW_FAILOVER");

	route(RELAY);
}


route[RELAY] {
	xlog("L_INFO", "[$pr:$fU@$si:$sp]: Relaying to $rd:$rp  \n"); 
	if (!t_relay()) {
		xlog("L_INFO", "[$pr:$fU@$si:$sp]: ERROR in Relaying  \n"); 
		sl_reply_error();
	};
	exit;
}


onreply_route[GW_FAILOVER] {
	xlog("L_INFO", "[$pr:$fU@$si:$sp]: On reply Route $rs:$rr  \n"); 
	if (is_method("INVITE") && $rs == 200){
		xlog("L_INFO", "[$pr:$fU@$si:$sp]: Removing Contact: $ct in $rs:$rr  \n"); 
		remove_hf("Contact");
		cache_fetch("local","ruri_$ci",$var(uri));
		xlog("L_INFO", "[$pr:$fU@$si:$sp]: Adding Contact: <$var(uri)> \n"); 
		append_hf("Contact: <$var(uri)>\r\n");
	}

}


failure_route[GW_FAILOVER] {
	xlog("L_INFO", "[$pr:$fU@$si:$sp]: In Failure Route  $rs:$rr \n"); 
	if (t_was_cancelled()) {
		exit;
	}

	# failure detection with redirect to next available trunk
	if (t_check_status("(408)|([56][0-9][0-9])")) {
		xlog("Failed trunk $rd/$du detected \n");
		send_reply("408","Request Timeout");
	}
}


local_route {
        xlog("L_NOTICE", "[$pr:$fU@$si:$sp]: In LOCAL Route sending $rs:$rr for Method $rm \n"); 
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_log_request("200 Dialog Timeout");
		
	}
}
